using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{
    [SerializeField]
    Define.CameraMode _mode = Define.CameraMode.QuarterView; // 카메라 모드 설정

    [SerializeField]
    Vector3 _delta = new Vector3(0.0f, 8.0f, -6.0f); // 카메라가 플레이어로부터 떨어져있을 위치

    [SerializeField]
    GameObject _player = null; // UnityChan(Player Object)를 드래그 드롭으로 넣기


    void Start()
    {
    }


    void LateUpdate() // Player 이동 후 카메라 이동하게 함 // LateUpdate()가 Update()보다 늦게 실행됨
    {
        if (_mode == Define.CameraMode.QuarterView) // 카메라모드가 QuarterView일 때
        {
            RaycastHit hit;
            if (Input.GetMouseButton(1))
            {
                Vector3 rot = transform.rotation.eulerAngles; // 현재 카메라의 각도를 Vector3로 반환
                rot.y += Input.GetAxis("Mouse X") * 10.0f; // 마우스 X 위치 * 회전 스피드
                rot.x += -1 * Input.GetAxis("Mouse Y") * 10.0f; // 마우스 Y 위치 * 회전 스피드
                Quaternion q = Quaternion.Euler(rot); // Quaternion으로 변환
                q.z = 0;
                transform.rotation = Quaternion.Slerp(transform.rotation, q, 2f); // 자연스럽게 회전
            }
            if (Physics.Raycast(_player.transform.position, _delta, out hit, _delta.magnitude, LayerMask.GetMask("Wall"))) // (레이저 시작위치, 레이저의 방향, 레이저 충돌 물체, 레이저 최대 길이, 특정 Layer만 연산) // 카메라와 플레이어 사이에 Wall이 있다면
            {
                float dist = (hit.point - _player.transform.position).magnitude * 0.8f; // (벽의 위치벡터 - 플레이어의 위치벡터 = 플레이어와 벽 사이의 거리벡터)의 크기의 0.8배 // 카메라를 위치 시키고 싶은 거리 크기
                transform.position = _player.transform.position + _delta.normalized * dist; // 플레이어 위치 + 카메라 방향의 단위벡터 * 카메라를 위치 시키고 싶은 거리 크기
            }
            else
            {
                transform.position = _player.transform.position + _delta; // 플레이어의 위치벡터에 카메라가 플레이어로부터 떨어져있을 위치벡터를 더해주기
                transform.LookAt(_player.transform); // 내가 카메라의 Rotation을 직접 설정하는 것이 아니라(45도로 설정했었음), 함수가 해당 Object를 지켜보도록 Rotation을 설정해줌
            }
        }
    }

    public void SetQuarterView(Vector3 delta) // 나중에 QuarterView를 코드로 세팅할 수도 있기 때문에 그냥 작성
    {
        _mode = Define.CameraMode.QuarterView;
        _delta = delta;
    }
 
}

//Drag
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DragCamera : MonoBehaviour
{
    public GameObject lookAtMe;
    public float rotateSpeed = 500.0f;
    public float scrollSpeed = 2000.0f;
    private float xRotateMove, yRotateMove;

    bool isAlt;
    Vector2 clickPoint;
    float dragSpeed = 30.0f;

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.LeftAlt)) isAlt = true;
        if (Input.GetKeyUp(KeyCode.LeftAlt)) isAlt = false;

        if (Input.GetMouseButtonDown(0)) clickPoint = new Vector2(Input.mousePosition.x, Input.mousePosition.y);

        if (Input.GetMouseButton(0))
        {
            if (isAlt)
            {
                lookAtMe.transform.SetParent(this.transform);

                Vector3 position
                    = Camera.main.ScreenToViewportPoint((Vector2)Input.mousePosition - clickPoint);

                position.z = position.y;
                position.y = .0f;

                Vector3 move = position * (Time.deltaTime * dragSpeed);

                float y = transform.position.y;

                transform.Translate(move);
                transform.position
                    = new Vector3(transform.position.x, y, transform.position.z);
            }
            else
            {
                xRotateMove = Input.GetAxis("Mouse X") * Time.deltaTime * rotateSpeed;
                yRotateMove = Input.GetAxis("Mouse Y") * Time.deltaTime * rotateSpeed;

                Vector3 pos = lookAtMe.transform.position;

                transform.RotateAround(pos, Vector3.right, -yRotateMove);
                transform.RotateAround(pos, Vector3.up, xRotateMove);

                transform.LookAt(pos);
            }
        }
        else
        {
            lookAtMe.transform.SetParent(null);

            float scroollWheel = Input.GetAxis("Mouse ScrollWheel");

            Vector3 cameraDirection = this.transform.localRotation * Vector3.forward;

            this.transform.position += cameraDirection * Time.deltaTime * scroollWheel * scrollSpeed;
        }
    }
}
